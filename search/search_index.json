{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Unofficial iRODS Documentation Best Practices and System Administrator documentation for iRODS systems by the community. NOT affiliated with RENCI or the iRODS project. Currently deployed using GitHub Pages - https://kript.github.io/unofficial_irods_documentation/ Roadmap It would be good if this can cover a variety of subjects usefull to someone setting up or managing an iRODS installation. Some ideas might be; # - \"Initial deployment\" # - \"Metrics and monitoring\" # - \"Zone Management\" # - \"Misc best practices\" # - Resources # - \"Compound Trees\" # - \"File system resources\" # - \"S3 resources\" Contributors This site would not be possible without the following contributors - thank you! Clemens Messerschmidt John Constable (ahem)","title":"Home"},{"location":"#unofficial-irods-documentation","text":"Best Practices and System Administrator documentation for iRODS systems by the community. NOT affiliated with RENCI or the iRODS project. Currently deployed using GitHub Pages - https://kript.github.io/unofficial_irods_documentation/","title":"Unofficial iRODS Documentation"},{"location":"#roadmap","text":"It would be good if this can cover a variety of subjects usefull to someone setting up or managing an iRODS installation. Some ideas might be; # - \"Initial deployment\" # - \"Metrics and monitoring\" # - \"Zone Management\" # - \"Misc best practices\" # - Resources # - \"Compound Trees\" # - \"File system resources\" # - \"S3 resources\"","title":"Roadmap"},{"location":"#contributors","text":"This site would not be possible without the following contributors - thank you! Clemens Messerschmidt John Constable (ahem)","title":"Contributors"},{"location":"About/","text":"unofficial_irods_documentation Best Practices and System Administrator documentation for iRODS systems by the community. NOT affiliated with RENCI or the iRODS project. Currently deployed using GitHub Pages - https://kript.github.io/unofficial_irods_documentation/","title":"About"},{"location":"About/#unofficial_irods_documentation","text":"Best Practices and System Administrator documentation for iRODS systems by the community. NOT affiliated with RENCI or the iRODS project. Currently deployed using GitHub Pages - https://kript.github.io/unofficial_irods_documentation/","title":"unofficial_irods_documentation"},{"location":"Database_tuning/","text":"Database tuning Indexes It can be tempting to add indexes for lots of the tables, but beware, there is database overhead to maintain an index. e.g., run as PostgreSQL user with write access to the database; create index idx_data_main9 on R_DATA_MAIN (data_checksum); For example, if you are writing lots of checksums (eg you have msiDataObjChksum in an upload rule), you might not want to add an index as the default and it can be added later by a DBA et al. No of Connections As iRODS does not do connection pooling, every connection to iRODS (including admin tasks) creates a new conection to the database, so you need to be sure that your database is configured for a number of connections relative to the amount of traffic you are expecting (and possibly a healthy overhead to be sure).","title":"Tuning"},{"location":"Database_tuning/#database-tuning","text":"","title":"Database tuning"},{"location":"Database_tuning/#indexes","text":"It can be tempting to add indexes for lots of the tables, but beware, there is database overhead to maintain an index. e.g., run as PostgreSQL user with write access to the database; create index idx_data_main9 on R_DATA_MAIN (data_checksum); For example, if you are writing lots of checksums (eg you have msiDataObjChksum in an upload rule), you might not want to add an index as the default and it can be added later by a DBA et al.","title":"Indexes"},{"location":"Database_tuning/#no-of-connections","text":"As iRODS does not do connection pooling, every connection to iRODS (including admin tasks) creates a new conection to the database, so you need to be sure that your database is configured for a number of connections relative to the amount of traffic you are expecting (and possibly a healthy overhead to be sure).","title":"No of Connections"},{"location":"Developer/","text":"Making changes to the core project (Copied from 6471 ) If you're trying to make changes to the server, it is going to require additional steps. Here is a quick breakdown of some of the most important directories: lib/api/src: Client-side API functions (basically wrappers around procApiRequest) lib/core/src: Code that is used on the client-side and server-side server/api/src: Server-side API endpoint implementations server/core/src: Server-side utilities, main server startup logic, etc. plugins/database/src: Database specific logic (db_plugin.cpp) General Tips: Functions with an rc prefix represent client-side APIs These calls invoke policy Functions with an rs prefix represent server-side APIs These calls do not invoke policy Functions with a leading underscore are meant for server-side use only The entry point for the server (startup, delay server forking, etc) can be found in rodsServer.cpp The agent factory logic can be found in rodsAgent.cpp When adding a new file to the server, it will require updating one or more CMakeLists.txt files Start with the CMakeLists.txt file located at the root of the repo. That file will help in understanding the structure of the project An easy way to see if your change is being compiled into the server is by adding a log message to rsDataObjPut() and then invoking iput. If everything compiles, then you should see your log message in the log file Last but not least, we highly recommend compiling and installing all of the packages produced by the https://github.com/irods/irods_development_environment. Doing so avoids weird situations around ABI, etc. Custom plugins (Taken from #6458 ) Calling a rule defined in a custom plugin (a .so file) which is defined in the server conf with a particular instance_name . To make this work, your plugin must implement exec_rule_text(). You can use the Logical Quotas REP as a reference for achieving this. See the following: https://github.com/irods/irods_rule_engine_plugin_logical_quotas/blob/df75c52f6d8aa89a2b452aeb56626c2f944b5986/src/main.cpp#L360 https://github.com/irods/irods_rule_engine_plugin_logical_quotas/blob/df75c52f6d8aa89a2b452aeb56626c2f944b5986/src/main.cpp#L331 https://github.com/irods/irods_rule_engine_plugin_logical_quotas/blob/df75c52f6d8aa89a2b452aeb56626c2f944b5986/src/main.cpp#L220 If you want to invoke rules within your plugin from a delay rule, you'll also need to implement exec_rule_expression(). The Logical Quotas REP supports both of these functions and demonstrates how someone can support these through a single function. Keep in mind that the implementation for your plugin could be very different from the Logical Quotas implementation depending on how your plugin accepts input. Logical Quotas accepts JSON as input. If your plugin also accepts JSON, you should be able to use the same pattern as the Logical Quotas REP.","title":"Brief overview"},{"location":"Developer/#making-changes-to-the-core-project","text":"(Copied from 6471 ) If you're trying to make changes to the server, it is going to require additional steps. Here is a quick breakdown of some of the most important directories: lib/api/src: Client-side API functions (basically wrappers around procApiRequest) lib/core/src: Code that is used on the client-side and server-side server/api/src: Server-side API endpoint implementations server/core/src: Server-side utilities, main server startup logic, etc. plugins/database/src: Database specific logic (db_plugin.cpp)","title":"Making changes to the core project"},{"location":"Developer/#general-tips","text":"Functions with an rc prefix represent client-side APIs These calls invoke policy Functions with an rs prefix represent server-side APIs These calls do not invoke policy Functions with a leading underscore are meant for server-side use only The entry point for the server (startup, delay server forking, etc) can be found in rodsServer.cpp The agent factory logic can be found in rodsAgent.cpp When adding a new file to the server, it will require updating one or more CMakeLists.txt files Start with the CMakeLists.txt file located at the root of the repo. That file will help in understanding the structure of the project An easy way to see if your change is being compiled into the server is by adding a log message to rsDataObjPut() and then invoking iput. If everything compiles, then you should see your log message in the log file Last but not least, we highly recommend compiling and installing all of the packages produced by the https://github.com/irods/irods_development_environment. Doing so avoids weird situations around ABI, etc.","title":"General Tips:"},{"location":"Developer/#custom-plugins","text":"(Taken from #6458 ) Calling a rule defined in a custom plugin (a .so file) which is defined in the server conf with a particular instance_name . To make this work, your plugin must implement exec_rule_text(). You can use the Logical Quotas REP as a reference for achieving this. See the following: https://github.com/irods/irods_rule_engine_plugin_logical_quotas/blob/df75c52f6d8aa89a2b452aeb56626c2f944b5986/src/main.cpp#L360 https://github.com/irods/irods_rule_engine_plugin_logical_quotas/blob/df75c52f6d8aa89a2b452aeb56626c2f944b5986/src/main.cpp#L331 https://github.com/irods/irods_rule_engine_plugin_logical_quotas/blob/df75c52f6d8aa89a2b452aeb56626c2f944b5986/src/main.cpp#L220 If you want to invoke rules within your plugin from a delay rule, you'll also need to implement exec_rule_expression(). The Logical Quotas REP supports both of these functions and demonstrates how someone can support these through a single function. Keep in mind that the implementation for your plugin could be very different from the Logical Quotas implementation depending on how your plugin accepts input. Logical Quotas accepts JSON as input. If your plugin also accepts JSON, you should be able to use the same pattern as the Logical Quotas REP.","title":"Custom plugins"},{"location":"PythonAPI/","text":"Python API Some notes on best use, along with some cookbook snippets that people might find helpful. Get the size of all objects under a particular collection Code snippet from #373 total_size_in_bytes = 0 n_data_objs = 0 collection = session.collections.get('/myZone/home/myUser/home/testCollection') for info in collection.walk( ): n_data_objs += len( info[2] ) total_size_in_bytes += sum( d.size for d in info[2] )","title":"Python API"},{"location":"PythonAPI/#python-api","text":"Some notes on best use, along with some cookbook snippets that people might find helpful.","title":"Python API"},{"location":"PythonAPI/#get-the-size-of-all-objects-under-a-particular-collection","text":"Code snippet from #373 total_size_in_bytes = 0 n_data_objs = 0 collection = session.collections.get('/myZone/home/myUser/home/testCollection') for info in collection.walk( ): n_data_objs += len( info[2] ) total_size_in_bytes += sum( d.size for d in info[2] )","title":"Get the size of all objects under a particular collection"},{"location":"Queries/","text":"Querying iRODS Adding specific queries from the command line bash escaping can cause havok when loading in a SQl query, so use this approach to work around that. # create file e.g. # vim lastWeekZeroLengthUnintentional.sql # put that into an environment variable QUERY=$(cat lastWeekZeroLengthUnintentional.sql ) # use the env varaible as a source for the query iadmin asq \"${QUERY}\" lastWeekZeroLengthUnintentional # run the query iquest --no-page --sql lastWeekZeroLengthUnintentional Sending query output by email iquest --no-page --sql lastWeekFilesSingleReplicaNotnoReplRoot | mail -s \"Single Replica Files Created over the last week\" -r \"iRODS Bot irods@domain>\" recipient@domain Specific queries to monitor catalog state Count of zero Length files where the checksum is not that of an empty file select count(*) from r_data_main d where d.data_size = '0' and to_timestamp(cast(d.create_ts as bigint)) > (NOW() - INTERVAL '7 DAY') and d.data_id not in (select object_id from r_objt_metamap a, r_meta_main b where a.meta_id = b.meta_id and b.meta_attr_name = 'md5' and b.meta_attr_value = 'd41d8cd98f00b204e9800998ecf8427e') and d.resc_id not in (with recursive cte as ( select r.resc_id, cast(r.resc_name as text) as resc_name, cast((case when r.resc_parent = '' then null else r.resc_parent end) as integer), 1 as level from r_resc_main r union all select e.resc_id, c.resc_name || ';' || cast(e.resc_name as text) as resc_name, cast((case when e.resc_parent = '' then null else e.resc_parent end) as integer), c.level + 1 from cte c join r_resc_main e on cast((case when e.resc_parent = '' then null else e.resc_parent end) as integer) = c.resc_id ) select resc_id from cte z where resc_name like 'noReplRoot%') Count of zero Length files created in the last week where the checksum is not that of an empty file select count(*) from r_data_main d where data_size = '0' and d.data_id not in (select object_id from r_objt_metamap a, r_meta_main b where a.meta_id = b.meta_id and b.meta_attr_name = 'md5' and b.meta_attr_value = 'd41d8cd98f00b204e9800998ecf8427e') and d.resc_id not in (with recursive cte as ( select r.resc_id, cast(r.resc_name as text) as resc_name, cast((case when r.resc_parent = '' then null else r.resc_parent end) as integer), 1 as level from r_resc_main r union all select e.resc_id, c.resc_name || ';' || cast(e.resc_name as text) as resc_name, cast((case when e.resc_parent = '' then null else e.resc_parent end) as integer), c.level + 1 from cte c join r_resc_main e on cast((case when e.resc_parent = '' then null else e.resc_parent end) as integer) = c.resc_id ) select resc_id from cte z where resc_name like 'noReplRoot%') List objects with a single replica where they are not in a tree that only has single replicas A bit confusing this one, but impossible to do with GenQuery. The idea behind this query is that there are two trees in a Zone, one called 'root' and one called 'noReplRoot'. As you might surmise, the 'root' tree contains a 'replicate' composite tree hierachy, so there should not be any files with a single replica unless they are in the noReplResc tree. This query lists objects violating those conditions created in the past week; select a.data_id, b.coll_name, a.data_name, to_timestamp(cast(a.create_ts as bigint)) as create_date from r_data_main a, r_coll_main b where a.coll_id = b.coll_id and to_timestamp(cast(a.create_ts as bigint)) > (NOW() - INTERVAL '7 DAY') and a.data_id in (select d.data_id from r_data_main d where resc_id not in ( with recursive cte as ( select r.resc_id, cast(r.resc_name as text) as resc_name, cast((case when r.resc_parent = '' then null else r.resc_parent end) as integer), 1 as level from r_resc_main r union all select e.resc_id, c.resc_name || ';' || cast(e.resc_name as text) as resc_name, cast((case when e.resc_parent = '' then null else e.resc_parent end) as integer), c.level + 1 from cte c join r_resc_main e on cast((case when e.resc_parent = '' then null else e.resc_parent end) as integer) = c.resc_id) select resc_id from cte z where resc_name like 'noReplRoot%') group by d.data_id having count(*) = 1) As above but with no time limit select a.data_id, b.coll_name, a.data_name, to_timestamp(cast(a.create_ts as bigint)) as create_date from r_data_main a, r_coll_main b where a.coll_id = b.coll_id and a.data_id in (select d.data_id from r_data_main d where resc_id not in ( with recursive cte as ( select r.resc_id, cast(r.resc_name as text) as resc_name, cast((case when r.resc_parent = '' then null else r.resc_parent end) as integer), 1 as level from r_resc_main r union all select e.resc_id, c.resc_name || ';' || cast(e.resc_name as text) as resc_name, cast((case when e.resc_parent = '' then null else e.resc_parent end) as integer), c.level + 1 from cte c join r_resc_main e on cast((case when e.resc_parent = '' then null else e.resc_parent end) as integer) = c.resc_id) select resc_id from cte z where resc_name like 'noReplRoot%') group by d.data_id having count(*) = 1) order by a.create_ts desc As above but no time limit and just return a count (for monitoring) select count(*) from ( select d.data_id from r_data_main d where resc_id not in ( with recursive cte as ( select r.resc_id, cast(r.resc_name as text) as resc_name, cast((case when r.resc_parent = '' then null else r.resc_parent end) as integer), 1 as level from r_resc_main r union all select e.resc_id, c.resc_name || ';' || cast(e.resc_name as text) as resc_name, cast((case when e.resc_parent = '' then null else e.resc_parent end) as integer), c.level + 1 from cte c join r_resc_main e on cast((case when e.resc_parent = '' then null else e.resc_parent end) as integer) = c.resc_id ) select resc_id from cte z where resc_name like 'noReplRoot%') group by d.data_id having count(*) = 1) t","title":"Usefull Queries"},{"location":"Queries/#querying-irods","text":"","title":"Querying iRODS"},{"location":"Queries/#adding-specific-queries-from-the-command-line","text":"bash escaping can cause havok when loading in a SQl query, so use this approach to work around that. # create file e.g. # vim lastWeekZeroLengthUnintentional.sql # put that into an environment variable QUERY=$(cat lastWeekZeroLengthUnintentional.sql ) # use the env varaible as a source for the query iadmin asq \"${QUERY}\" lastWeekZeroLengthUnintentional # run the query iquest --no-page --sql lastWeekZeroLengthUnintentional","title":"Adding specific queries from the command line"},{"location":"Queries/#sending-query-output-by-email","text":"iquest --no-page --sql lastWeekFilesSingleReplicaNotnoReplRoot | mail -s \"Single Replica Files Created over the last week\" -r \"iRODS Bot irods@domain>\" recipient@domain","title":"Sending query output by email"},{"location":"Queries/#specific-queries-to-monitor-catalog-state","text":"","title":"Specific queries to monitor catalog state"},{"location":"Queries/#count-of-zero-length-files-where-the-checksum-is-not-that-of-an-empty-file","text":"select count(*) from r_data_main d where d.data_size = '0' and to_timestamp(cast(d.create_ts as bigint)) > (NOW() - INTERVAL '7 DAY') and d.data_id not in (select object_id from r_objt_metamap a, r_meta_main b where a.meta_id = b.meta_id and b.meta_attr_name = 'md5' and b.meta_attr_value = 'd41d8cd98f00b204e9800998ecf8427e') and d.resc_id not in (with recursive cte as ( select r.resc_id, cast(r.resc_name as text) as resc_name, cast((case when r.resc_parent = '' then null else r.resc_parent end) as integer), 1 as level from r_resc_main r union all select e.resc_id, c.resc_name || ';' || cast(e.resc_name as text) as resc_name, cast((case when e.resc_parent = '' then null else e.resc_parent end) as integer), c.level + 1 from cte c join r_resc_main e on cast((case when e.resc_parent = '' then null else e.resc_parent end) as integer) = c.resc_id ) select resc_id from cte z where resc_name like 'noReplRoot%')","title":"Count of zero Length files where the checksum is not that of an empty file"},{"location":"Queries/#count-of-zero-length-files-created-in-the-last-week-where-the-checksum-is-not-that-of-an-empty-file","text":"select count(*) from r_data_main d where data_size = '0' and d.data_id not in (select object_id from r_objt_metamap a, r_meta_main b where a.meta_id = b.meta_id and b.meta_attr_name = 'md5' and b.meta_attr_value = 'd41d8cd98f00b204e9800998ecf8427e') and d.resc_id not in (with recursive cte as ( select r.resc_id, cast(r.resc_name as text) as resc_name, cast((case when r.resc_parent = '' then null else r.resc_parent end) as integer), 1 as level from r_resc_main r union all select e.resc_id, c.resc_name || ';' || cast(e.resc_name as text) as resc_name, cast((case when e.resc_parent = '' then null else e.resc_parent end) as integer), c.level + 1 from cte c join r_resc_main e on cast((case when e.resc_parent = '' then null else e.resc_parent end) as integer) = c.resc_id ) select resc_id from cte z where resc_name like 'noReplRoot%')","title":"Count of zero Length files created in the last week where the checksum is not that of an empty file"},{"location":"Queries/#list-objects-with-a-single-replica-where-they-are-not-in-a-tree-that-only-has-single-replicas","text":"A bit confusing this one, but impossible to do with GenQuery. The idea behind this query is that there are two trees in a Zone, one called 'root' and one called 'noReplRoot'. As you might surmise, the 'root' tree contains a 'replicate' composite tree hierachy, so there should not be any files with a single replica unless they are in the noReplResc tree. This query lists objects violating those conditions created in the past week; select a.data_id, b.coll_name, a.data_name, to_timestamp(cast(a.create_ts as bigint)) as create_date from r_data_main a, r_coll_main b where a.coll_id = b.coll_id and to_timestamp(cast(a.create_ts as bigint)) > (NOW() - INTERVAL '7 DAY') and a.data_id in (select d.data_id from r_data_main d where resc_id not in ( with recursive cte as ( select r.resc_id, cast(r.resc_name as text) as resc_name, cast((case when r.resc_parent = '' then null else r.resc_parent end) as integer), 1 as level from r_resc_main r union all select e.resc_id, c.resc_name || ';' || cast(e.resc_name as text) as resc_name, cast((case when e.resc_parent = '' then null else e.resc_parent end) as integer), c.level + 1 from cte c join r_resc_main e on cast((case when e.resc_parent = '' then null else e.resc_parent end) as integer) = c.resc_id) select resc_id from cte z where resc_name like 'noReplRoot%') group by d.data_id having count(*) = 1)","title":"List objects with a single replica where they are not in a tree that only has single replicas"},{"location":"Queries/#as-above-but-with-no-time-limit","text":"select a.data_id, b.coll_name, a.data_name, to_timestamp(cast(a.create_ts as bigint)) as create_date from r_data_main a, r_coll_main b where a.coll_id = b.coll_id and a.data_id in (select d.data_id from r_data_main d where resc_id not in ( with recursive cte as ( select r.resc_id, cast(r.resc_name as text) as resc_name, cast((case when r.resc_parent = '' then null else r.resc_parent end) as integer), 1 as level from r_resc_main r union all select e.resc_id, c.resc_name || ';' || cast(e.resc_name as text) as resc_name, cast((case when e.resc_parent = '' then null else e.resc_parent end) as integer), c.level + 1 from cte c join r_resc_main e on cast((case when e.resc_parent = '' then null else e.resc_parent end) as integer) = c.resc_id) select resc_id from cte z where resc_name like 'noReplRoot%') group by d.data_id having count(*) = 1) order by a.create_ts desc","title":"As above but with no time limit"},{"location":"Queries/#as-above-but-no-time-limit-and-just-return-a-count-for-monitoring","text":"select count(*) from ( select d.data_id from r_data_main d where resc_id not in ( with recursive cte as ( select r.resc_id, cast(r.resc_name as text) as resc_name, cast((case when r.resc_parent = '' then null else r.resc_parent end) as integer), 1 as level from r_resc_main r union all select e.resc_id, c.resc_name || ';' || cast(e.resc_name as text) as resc_name, cast((case when e.resc_parent = '' then null else e.resc_parent end) as integer), c.level + 1 from cte c join r_resc_main e on cast((case when e.resc_parent = '' then null else e.resc_parent end) as integer) = c.resc_id ) select resc_id from cte z where resc_name like 'noReplRoot%') group by d.data_id having count(*) = 1) t","title":"As above but no time limit and just return a count (for monitoring)"},{"location":"Server_setup/","text":"Server Setup iRODS is very sesntitive to hostmaes, so you must ensure that each server can resolve the names of other servers ) as they believe themselves to be called . This is particularly important when it comes to FQDN's etc, and if dealing with Spilt DNS and similar architectures where servers may resolve differently depending on the client/interface used for the resolution.","title":"Setup"},{"location":"Server_setup/#server-setup","text":"iRODS is very sesntitive to hostmaes, so you must ensure that each server can resolve the names of other servers ) as they believe themselves to be called . This is particularly important when it comes to FQDN's etc, and if dealing with Spilt DNS and similar architectures where servers may resolve differently depending on the client/interface used for the resolution.","title":"Server Setup"},{"location":"Sysadmin/","text":"System Administration Tricks and Tips Configuration Validation Manually editing JSON config files can be fraught with issues. Fortunately, RENCI has built a validator into the system; python /var/lib/irods/scripts/validate_json.py /etc/irods/server_config .json file:///var/lib/irods/configuration_schemas/v3/server_config.json Unfortunately, all THAT told me was that it was an invalid JSON file. Not much help! Next, compare my backup of the config file with the live one. You DO take backups, right?. Of course you do! Enter the JSON-diff tool! Also, not as helpful - that also told me the file wasn't valid JSON. OK, how about a normal linter; jsonlint ? jsonlint-py3 /etc/irods/server_config.json /etc/irods/server_config.json:55:8: Error: Expected a ']' but saw '}' | At line 55, column 8, offset 1938 | Array started at line 54, column 20, offset 1928 /etc/irods/server_config.json:56:6: Error: Object properties (keys) must be string literals, numbers, or identifiers | At line 56, column 6, offset 1947 | Object started at line 1, column 0, offset 0 (AT-START) /etc/irods/server_config.json:56:6: Error: Missing value for object property, expected \":\" | At line 56, column 6, offset 1947 | Object started at line 1, column 0, offset 0 (AT-START) /etc/irods/server_config.json:84:4: Error: Expected a '}' but saw ']' | At line 84, column 4, offset 2867 | Object started at line 1, column 0, offset 0 (AT-START) /etc/irods/server_config.json:84:4: Error: Unexpected text after end of JSON value | At line 84, column 4, offset 2867 /etc/irods/server_config.json: has errors OK, that's helpful, but I'd really like a more succinct 'what did I change'... back to good old diff diff -c /etc/irods/server_config.json /etc/irods/server_config.json.20610.2022-05-04@15:55:10~ *** /etc/irods/server_config.json 2022-05-04 15:55:10.618672763 +0100 --- /etc/irods/server_config.json.20610.2022-05-04@15:55:10~ 2021-09-17 11:13:50.011210000 +0100 *************** *** 52,58 **** \"network\": {}, \"resource\": {}, \"rule_engines\": [ - }, { \"instance_name\": \"irods_rule_engine_plugin-irods_rule_language-instance\", \"plugin_name\": \"irods_rule_engine_plugin-irods_rule_language\", --- 52,57 ----","title":"General Notes"},{"location":"Sysadmin/#system-administration-tricks-and-tips","text":"","title":"System Administration Tricks and Tips"},{"location":"Sysadmin/#configuration-validation","text":"Manually editing JSON config files can be fraught with issues. Fortunately, RENCI has built a validator into the system; python /var/lib/irods/scripts/validate_json.py /etc/irods/server_config .json file:///var/lib/irods/configuration_schemas/v3/server_config.json Unfortunately, all THAT told me was that it was an invalid JSON file. Not much help! Next, compare my backup of the config file with the live one. You DO take backups, right?. Of course you do! Enter the JSON-diff tool! Also, not as helpful - that also told me the file wasn't valid JSON. OK, how about a normal linter; jsonlint ? jsonlint-py3 /etc/irods/server_config.json /etc/irods/server_config.json:55:8: Error: Expected a ']' but saw '}' | At line 55, column 8, offset 1938 | Array started at line 54, column 20, offset 1928 /etc/irods/server_config.json:56:6: Error: Object properties (keys) must be string literals, numbers, or identifiers | At line 56, column 6, offset 1947 | Object started at line 1, column 0, offset 0 (AT-START) /etc/irods/server_config.json:56:6: Error: Missing value for object property, expected \":\" | At line 56, column 6, offset 1947 | Object started at line 1, column 0, offset 0 (AT-START) /etc/irods/server_config.json:84:4: Error: Expected a '}' but saw ']' | At line 84, column 4, offset 2867 | Object started at line 1, column 0, offset 0 (AT-START) /etc/irods/server_config.json:84:4: Error: Unexpected text after end of JSON value | At line 84, column 4, offset 2867 /etc/irods/server_config.json: has errors OK, that's helpful, but I'd really like a more succinct 'what did I change'... back to good old diff diff -c /etc/irods/server_config.json /etc/irods/server_config.json.20610.2022-05-04@15:55:10~ *** /etc/irods/server_config.json 2022-05-04 15:55:10.618672763 +0100 --- /etc/irods/server_config.json.20610.2022-05-04@15:55:10~ 2021-09-17 11:13:50.011210000 +0100 *************** *** 52,58 **** \"network\": {}, \"resource\": {}, \"rule_engines\": [ - }, { \"instance_name\": \"irods_rule_engine_plugin-irods_rule_language-instance\", \"plugin_name\": \"irods_rule_engine_plugin-irods_rule_language\", --- 52,57 ----","title":"Configuration Validation"}]}